env-file: .envs/.django
groups:
  reactjs:
    tasks:
      install:
        help: Install the dependencies for the frontend
        dir: src/frontend
        run: npm install
      build:
        help: Build the assets for reactjs
        dir: src/frontend
        run: npm run build
      autobuild:
        help: Build the assets for reactjs
        run: python scripts/autobuild_frontend.py

  django:
    tasks:
      runserver:
        env-file: .envs/.env
        hooks:
          pre-run:
            - task: reactjs.install
            - task: reactjs.build
        dir: src/backend
        run: |
          if "${{ env.SUGAR_GROUP }}" == "prod":
              python manage.py compress
          python manage.py runserver

      create-superuser:
        args:
          email:
            help: Specify the username
            type: string
            required: True
          username:
            help: Specify the username
            type: string
            required: True
            interactive: True
          password:
            help: Specify the password
            type: string
            required: True
            interactive: True
        env:
          POSTGRES_HOST: localhost
        help: create an admin user
        run: |
          export DJANGO_SUPERUSER_PASSWORD=${{ args.password }}
          export DJANGO_SUPERUSER_USERNAME=${{ args.username }}
          python manage.py createsuperuser --noinput --email ${{ args.email }}

      makemigrations:
        help: Run django makemigrations command (just for development)
        env-file: .envs/.env
        dir: src/backend
        args:
          check:
            help: |
              Just check if the latest migration files were already created.
            type: bool
            action: store_true
        backend: bash
        run: |
          CMD_FLAG="${{ '--check' if args.check else '' }} --no-input"
          python manage.py makemigrations ${CMD_FLAG}

      migrate:
        env-file: .envs/.env
        dir: src/backend
        run: |
          python manage.py migrate

      collectstatic:
        env-file: .envs/.env
        dir: src/backend
        hooks:
          pre-run:
            - task: reactjs.install
            - task: reactjs.build
        run: |
          python manage.py collectstatic -v 3 --noinput  # --clear

  nginx:
    tasks:
      proxydomain:
        help: Create SSL proxy configuration with CertBot for a domain
        env-file: .envs/.env
        run: |
          python ./containers/nginx/scripts/generate_proxy_ui.py
      generate-certificate:
        help: Generate certificate
        env-file: .envs/.env
        run: |
          bash ./containers/nginx/scripts/generate-certificates.sh
      setup:
        hooks:
          pre-run:
            - task: nginx.proxydomain
            - task: nginx.generate-certificate

  release:
    vars:
      app: |
        npx --yes \
          -p semantic-release \
          -p conventional-changelog-conventionalcommits \
          -p "@semantic-release/commit-analyzer" \
          -p "@semantic-release/release-notes-generator" \
          -p "@semantic-release/changelog" \
          -p "@semantic-release/exec" \
          -p "@semantic-release/github" \
          -p "@semantic-release/git" \
          -p "semantic-release-replace-plugin@1.2.7" \
          semantic-release

    tasks:
      ci:
        help: run semantic release on CI
        run: ${{ vars.app }} --ci

      dry:
        help: run semantic release in dry-run mode
        run: |
          ${{ vars.app }} --dry-run
